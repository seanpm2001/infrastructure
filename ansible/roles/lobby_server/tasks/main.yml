## Database

- name: Database - create lobby database
  include_role:
    name: database/postgres/create_database
  vars:
    database_name: "{{ lobby_db_name }}"
    database_user: "{{ lobby_db_user }}"
    database_password: "{{ lobby_db_password }}"

- name: Database - Run Flyway to execute DB migrations (install schema, database tables, data migrations)
  include_role:
    name: database/flyway/run_migrations
  vars:
    migrations_file: "migrations.zip"
    flyway_db_name: "{{ lobby_db_name }}"
    flyway_migration_dir: "lobby_db"
    flyway_user: "{{ lobby_db_user }}"
    flyway_password: "{{ lobby_db_password }}"

## Nginx

- name: Nginx config - generate dhparams
  include_role:
    name: nginx/generate_dhparams

- name: Nginx config - deploy /etc/nginx/sites-enabled/lobby.conf
  template:
    src: "etc_nginx_sites_enabled_lobby.conf"
    dest: /etc/nginx/sites-enabled/lobby.conf
    owner: root
    group: root
    mode: "0644"

- name: Nginx config - deploy 2.5 lobby nginx config
  template:
    src: 2-5_lobby.conf
    dest: /etc/nginx/sites-enabled/lobby-2-5.conf
    owner: root
    group: root
    mode: "0644"

- name: Nginx config - generate self signed cert
  when: nginx_generate_self_signed_cert
  include_role:
    name: nginx/generate_self_signed_cert
  vars:
    ssl_cert_folder: "{{ lobby_public_cert_folder }}"
    ssl_cert_key: "{{ lobby_private_key_file }}"
    ssl_cert: "{{ lobby_public_cert_file }}"

## Application

- name: create lobby service user group
  group:
    name: "{{ lobby_user }}"

- name: create service user
  user:
    name: "{{ lobby_user }}"
    group: "{{ lobby_user }}"
    create_home: no
    system: yes

- name: ensure deployment folder exists
  file:
    state: directory
    path: "{{ lobby_home_folder }}"
    mode: "0755"
    owner: "{{ lobby_user }}"
    group: "{{ lobby_user }}"

- name: extract lobby_server zip file
  register: deploy_artifact
  unarchive:
    src: "{{ lobby_artifact }}"
    dest: "{{ lobby_home_folder }}/"
    owner: "{{ lobby_user }}"
    group: "{{ lobby_user }}"

- name: install systemd service file
  register: service_script
  template:
    src: lobby_server.service.j2
    dest: /lib/systemd/system/{{ lobby_name }}.service
    mode: "644"

# Ideally we would restart the lobby if we update it to run the new version.
# We do not want to disconnect users, so we do not restart the lobby.
- name: ensure lobby is started
  systemd:
    name: "{{ lobby_name }}"
    state: started
    enabled: yes
    daemon_reload: true

- name: drop a version file in lobby home
  template:
    src: version.txt
    dest: "{{ lobby_home_folder }}/version.txt"
    mode: "0644"
    owner: "{{ lobby_user }}"
    group: "{{ lobby_user }}"
